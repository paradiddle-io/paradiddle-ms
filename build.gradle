plugins {
    id 'groovy'
    id 'jacoco'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
}

repositories {
    mavenCentral()
}

testSets {
    integrationTest
}

dependencies {
    testImplementation 'org.codehaus.groovy:groovy-all:2.5.12'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'junit:junit:4.13'

    integrationTestImplementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
}

jacocoTestCoverageVerification {
    dependsOn test, integrationTest
    executionData(
        files(
            [
                "$buildDir/jacoco/test.exec",
                "$buildDir/jacoco/integrationTest.exec"
            ]
        )
    )
    violationRules {
        rule {
            element = 'BUNDLE'

            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }

        rule {
            element = 'CLASS'

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }

            excludes = [
                // Class only delegates so won't benefit from test coverage
                'io.paradiddle.ms.util.SetDelegate'
            ]
        }

        rule {
            element = 'METHOD'

            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }

            limit {
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }

            excludes = [
                // Methods of class that only delegates
                'io.paradiddle.ms.util.SetDelegate.SetDelegate(java.util.Set)',
                'io.paradiddle.ms.util.SetDelegate.size()',
                'io.paradiddle.ms.util.SetDelegate.isEmpty()',
                'io.paradiddle.ms.util.SetDelegate.contains(java.lang.Object)',
                'io.paradiddle.ms.util.SetDelegate.iterator()',
                'io.paradiddle.ms.util.SetDelegate.toArray()',
                'io.paradiddle.ms.util.SetDelegate.toArray(java.lang.Object[])',
                'io.paradiddle.ms.util.SetDelegate.add(java.lang.Object)',
                'io.paradiddle.ms.util.SetDelegate.remove(java.lang.Object)',
                'io.paradiddle.ms.util.SetDelegate.containsAll(java.util.Collection)',
                'io.paradiddle.ms.util.SetDelegate.addAll(java.util.Collection)',
                'io.paradiddle.ms.util.SetDelegate.retainAll(java.util.Collection)',
                'io.paradiddle.ms.util.SetDelegate.removeAll(java.util.Collection)',
                'io.paradiddle.ms.util.SetDelegate.clear()',
                'io.paradiddle.ms.util.SetDelegate.equals(java.lang.Object)',
                'io.paradiddle.ms.util.SetDelegate.hashCode()',
                'io.paradiddle.ms.util.SetDelegate.spliterator()'
            ]
        }
    }
}

task codeCoverageReport(type: JacocoReport, group: 'reporting') {
    dependsOn test, integrationTest

    executionData tasks.withType(Test)
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}
